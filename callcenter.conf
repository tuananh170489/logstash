input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/lib/mysql-connector-java-5.1.38.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://10.10.2.92:3306/asterisk"
    jdbc_user => "cdr"
    jdbc_password_filepath => "/usr/share/logstash/data/jdbc_callcenter.secr"
    columns_charset => { 
        "id" => "utf-8"
        "code" => "utf-8"
        "name" => "utf-8"
        "first_address" => "utf-8"
        "email" => "utf-8"
        "tel" => "utf-8" 
    }   
    jdbc_default_timezone => "Asia/Ho_Chi_Minh"
    jdbc_paging_enabled => true
    jdbc_page_size => 100000
    last_run_metadata_path => "/usr/share/logstash/data/call_center_last_data.data"
    schedule => "* * * * *"
    sql_log_level =>  "info"
    statement => "select `id`, `accountcode`, `src`, `dst`, `dcontext`, `clid`, `channel`, `dstchannel`, `lastapp`, `lastdata`, `calldate`, `answerdate`, `hangupdate`, `total_duration`, `answer_duration`, `callstate`, `amaflags`, `uniqueid`, `userfield`, `peeraccount`, `linkedid`, `sequence`, `recordfilename`, `update_at` from `asterisk`.`cdr` WHERE `dcontext` IN ('cskh_hcm', 'cskh_hn', 'ghtk-DN', 'ghtk-HCM', 'ghtk-HN') AND (answer_duration <> 0 OR total_duration <> 0) and lastapp IN ('Dial', 'Queue') AND update_at >= :sql_last_value "
    tracking_column => "update_at"
    tracking_column_type => "timestamp"
    use_column_value => true
  }
}

filter {
    
    # callout
    if [lastapp] == "Dial" {
        grok {
	        match => {
			    "channel" => "SIP/%{POSINT:channel_ext}(?:.*)"
		    }   
	    }
        mutate {
            copy => { "channel_ext" => "ext" }
        }
    # callin
    } else if [lastapp] == "Queue" {
        grok {
	        match => {
			    "dstchannel" => "SIP/%{POSINT:dstchannel_ext}(?:.*)"
		    }   
	    }
        mutate {
            copy => { "dstchannel_ext" => "ext" }
        }        
    }
    ruby {
        init => "require('time')"
        code => "event.set('index_pattern', event.get('calldate').time.localtime.strftime('%Y%m%d'))"
    }
}
output {
    elasticsearch {
        "doc_as_upsert" => true
        "document_id" => "%{id}"
        "hosts" => ["10.10.2.91:9200"]
        "index" => "callcenter_cdr-%{index_pattern}"
        "manage_template" => false
    }
}
